/*
 * generated by Xtext 2.12.0
 */
package org.xtext.dsl.parafarmacia.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dsl.parafarmacia.parafarmacia.Apariencia;
import org.xtext.dsl.parafarmacia.parafarmacia.Cuerpo;
import org.xtext.dsl.parafarmacia.parafarmacia.Pagina;
import org.xtext.dsl.parafarmacia.parafarmacia.Parafarmacia;
import org.xtext.dsl.parafarmacia.parafarmacia.ParafarmaciaPackage;
import org.xtext.dsl.parafarmacia.parafarmacia.Producto;
import org.xtext.dsl.parafarmacia.services.ParafarmaciaGrammarAccess;

@SuppressWarnings("all")
public class ParafarmaciaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ParafarmaciaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ParafarmaciaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ParafarmaciaPackage.APARIENCIA:
				sequence_Apariencia(context, (Apariencia) semanticObject); 
				return; 
			case ParafarmaciaPackage.CUERPO:
				sequence_Cuerpo(context, (Cuerpo) semanticObject); 
				return; 
			case ParafarmaciaPackage.PAGINA:
				sequence_Pagina(context, (Pagina) semanticObject); 
				return; 
			case ParafarmaciaPackage.PARAFARMACIA:
				sequence_Parafarmacia(context, (Parafarmacia) semanticObject); 
				return; 
			case ParafarmaciaPackage.PRODUCTO:
				sequence_Producto(context, (Producto) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Apariencia returns Apariencia
	 *
	 * Constraint:
	 *     (
	 *         colorFondo1=Color 
	 *         colorFondo2=Color 
	 *         colorTexto=Color 
	 *         sizeFuenteH1=INT 
	 *         sizeFuenteH2=INT 
	 *         sizeFuenteCuerpo=INT
	 *     )
	 */
	protected void sequence_Apariencia(ISerializationContext context, Apariencia semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_FONDO1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_FONDO1));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_FONDO2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_FONDO2));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_TEXTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__COLOR_TEXTO));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_H1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_H1));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_H2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_H2));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_CUERPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.APARIENCIA__SIZE_FUENTE_CUERPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAparienciaAccess().getColorFondo1ColorParserRuleCall_4_0(), semanticObject.getColorFondo1());
		feeder.accept(grammarAccess.getAparienciaAccess().getColorFondo2ColorParserRuleCall_8_0(), semanticObject.getColorFondo2());
		feeder.accept(grammarAccess.getAparienciaAccess().getColorTextoColorParserRuleCall_12_0(), semanticObject.getColorTexto());
		feeder.accept(grammarAccess.getAparienciaAccess().getSizeFuenteH1INTTerminalRuleCall_21_0(), semanticObject.getSizeFuenteH1());
		feeder.accept(grammarAccess.getAparienciaAccess().getSizeFuenteH2INTTerminalRuleCall_26_0(), semanticObject.getSizeFuenteH2());
		feeder.accept(grammarAccess.getAparienciaAccess().getSizeFuenteCuerpoINTTerminalRuleCall_34_0(), semanticObject.getSizeFuenteCuerpo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cuerpo returns Cuerpo
	 *
	 * Constraint:
	 *     (texto=STRING | productos+=Producto+)
	 */
	protected void sequence_Cuerpo(ISerializationContext context, Cuerpo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pagina returns Pagina
	 *
	 * Constraint:
	 *     (name=ID titulo=STRING cuerpo=Cuerpo)
	 */
	protected void sequence_Pagina(ISerializationContext context, Pagina semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.PAGINA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.PAGINA__NAME));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.PAGINA__TITULO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.PAGINA__TITULO));
			if (transientValues.isValueTransient(semanticObject, ParafarmaciaPackage.Literals.PAGINA__CUERPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ParafarmaciaPackage.Literals.PAGINA__CUERPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPaginaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPaginaAccess().getTituloSTRINGTerminalRuleCall_4_0(), semanticObject.getTitulo());
		feeder.accept(grammarAccess.getPaginaAccess().getCuerpoCuerpoParserRuleCall_8_0(), semanticObject.getCuerpo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parafarmacia returns Parafarmacia
	 *
	 * Constraint:
	 *     (titulo=STRING descripcion=STRING apariencia=Apariencia paginas+=Pagina*)
	 */
	protected void sequence_Parafarmacia(ISerializationContext context, Parafarmacia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Producto returns Producto
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nombre=STRING 
	 *         precio=Precio 
	 *         imagen=STRING? 
	 *         conreceta?='con receta'? 
	 *         descripcion=STRING
	 *     )
	 */
	protected void sequence_Producto(ISerializationContext context, Producto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
