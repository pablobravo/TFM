/**
 * generated by Xtext 2.12.0
 */
package org.xtext.dsl.generador.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.dsl.generador.generador.Apariencia;
import org.xtext.dsl.generador.generador.Desplegable;
import org.xtext.dsl.generador.generador.Direccion;
import org.xtext.dsl.generador.generador.Parafarmacia;
import org.xtext.dsl.generador.generador.Permanente;
import org.xtext.dsl.generador.generador.Producto;
import org.xtext.dsl.generador.generador.Registro;
import org.xtext.dsl.generador.generador.Tipo;
import org.xtext.dsl.generador.services.GeneradorGrammarAccess;

@SuppressWarnings("all")
public class GeneradorFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GeneradorGrammarAccess _generadorGrammarAccess;
  
  protected void _format(final Parafarmacia parafarmacia, @Extension final IFormattableDocument document) {
    document.<Direccion>format(parafarmacia.getDireccion());
    document.<Registro>format(parafarmacia.getRegistro());
    document.<Tipo>format(parafarmacia.getTipo());
    document.<Apariencia>format(parafarmacia.getApariencia());
    EList<Producto> _productos = parafarmacia.getProductos();
    for (final Producto producto : _productos) {
      document.<Producto>format(producto);
    }
  }
  
  protected void _format(final Tipo tipo, @Extension final IFormattableDocument document) {
    document.<Desplegable>format(tipo.getDesplegable());
    document.<Permanente>format(tipo.getPermanente());
  }
  
  public void format(final Object parafarmacia, final IFormattableDocument document) {
    if (parafarmacia instanceof XtextResource) {
      _format((XtextResource)parafarmacia, document);
      return;
    } else if (parafarmacia instanceof Parafarmacia) {
      _format((Parafarmacia)parafarmacia, document);
      return;
    } else if (parafarmacia instanceof Tipo) {
      _format((Tipo)parafarmacia, document);
      return;
    } else if (parafarmacia instanceof EObject) {
      _format((EObject)parafarmacia, document);
      return;
    } else if (parafarmacia == null) {
      _format((Void)null, document);
      return;
    } else if (parafarmacia != null) {
      _format(parafarmacia, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(parafarmacia, document).toString());
    }
  }
}
